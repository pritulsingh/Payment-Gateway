"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "sdk_components_PaymentButton_jsx";
exports.ids = ["sdk_components_PaymentButton_jsx"];
exports.modules = {

/***/ "./sdk/components/PaymentButton.jsx":
/*!******************************************!*\
  !*** ./sdk/components/PaymentButton.jsx ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! styled-jsx/style */ \"styled-jsx/style\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _barrel_optimize_names_AlertCircle_CheckCircle_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=AlertCircle,CheckCircle,Wallet!=!lucide-react */ \"./node_modules/lucide-react/dist/esm/icons/wallet.js\");\n/* harmony import */ var _barrel_optimize_names_AlertCircle_CheckCircle_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=AlertCircle,CheckCircle,Wallet!=!lucide-react */ \"./node_modules/lucide-react/dist/esm/icons/circle-check-big.js\");\n/* harmony import */ var _barrel_optimize_names_AlertCircle_CheckCircle_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=AlertCircle,CheckCircle,Wallet!=!lucide-react */ \"./node_modules/lucide-react/dist/esm/icons/circle-alert.js\");\n/* harmony import */ var _core_MorphPay__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/MorphPay */ \"./sdk/core/MorphPay.js\");\n/* harmony import */ var _core_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/utils */ \"./sdk/core/utils.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_core_MorphPay__WEBPACK_IMPORTED_MODULE_3__]);\n_core_MorphPay__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\nconst PaymentButton = ({ contractAddress, amount, recipient, paymentType = \"ETH\", tokenAddress = null, autoConnect = false, onSuccess = ()=>{}, onError = ()=>{}, onConnect = ()=>{}, className = \"\", style = {}, children, size = \"md\", variant = \"primary\", disabled = false })=>{\n    const [morphPay, setMorphPay] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null);\n    const [account, setAccount] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"\");\n    const [chainId, setChainId] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"\");\n    const [isConnected, setIsConnected] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const [isConnecting, setIsConnecting] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const [isProcessing, setIsProcessing] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"\");\n    const [contractExists, setContractExists] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null);\n    // Size configurations\n    const sizeConfig = {\n        sm: {\n            padding: \"8px 16px\",\n            fontSize: \"14px\",\n            iconSize: 14\n        },\n        md: {\n            padding: \"12px 24px\",\n            fontSize: \"16px\",\n            iconSize: 16\n        },\n        lg: {\n            padding: \"16px 32px\",\n            fontSize: \"18px\",\n            iconSize: 18\n        }\n    };\n    // Variant configurations\n    const variantConfig = {\n        primary: {\n            backgroundColor: \"#007bff\",\n            color: \"white\",\n            border: \"none\",\n            hoverBg: \"#0056b3\"\n        },\n        secondary: {\n            backgroundColor: \"#6c757d\",\n            color: \"white\",\n            border: \"none\",\n            hoverBg: \"#545b62\"\n        },\n        outline: {\n            backgroundColor: \"transparent\",\n            color: \"#007bff\",\n            border: \"2px solid #007bff\",\n            hoverBg: \"#007bff\",\n            hoverColor: \"white\"\n        }\n    };\n    const currentSize = sizeConfig[size];\n    const currentVariant = variantConfig[variant];\n    // Initialize MorphPay\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        const initMorphPay = async ()=>{\n            try {\n                if (!contractAddress) {\n                    setError(\"Contract address is required\");\n                    return;\n                }\n                const morphPayInstance = new _core_MorphPay__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n                    contractAddress\n                });\n                setMorphPay(morphPayInstance);\n                // Check contract exists\n                const contractInfo = await morphPayInstance.getContractInfo();\n                setContractExists(contractInfo.exists);\n                // Auto-connect if enabled\n                if (autoConnect) {\n                    await checkConnectionSilently(morphPayInstance);\n                }\n                // Set up event listeners\n                if (window.ethereum) {\n                    window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n                    window.ethereum.on(\"chainChanged\", handleChainChanged);\n                }\n            } catch (err) {\n                console.error(\"Error initializing MorphPay:\", err);\n                setError(\"Failed to initialize payment system\");\n            }\n        };\n        initMorphPay();\n        return ()=>{\n            if (window.ethereum) {\n                window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n                window.ethereum.removeListener(\"chainChanged\", handleChainChanged);\n            }\n        };\n    }, [\n        contractAddress,\n        autoConnect\n    ]);\n    const checkConnectionSilently = async (morphPayInstance)=>{\n        try {\n            const accounts = await window.ethereum.request({\n                method: \"eth_accounts\"\n            });\n            if (accounts.length > 0) {\n                const currentChainId = await window.ethereum.request({\n                    method: \"eth_chainId\"\n                });\n                setAccount(accounts[0]);\n                setChainId(currentChainId);\n                setIsConnected(true);\n                onConnect({\n                    account: accounts[0],\n                    chainId: currentChainId,\n                    isCorrectChain: currentChainId === _core_utils__WEBPACK_IMPORTED_MODULE_4__.MORPH_CHAIN_ID\n                });\n            }\n        } catch (err) {\n            console.error(\"Error checking connection:\", err);\n        }\n    };\n    const handleAccountsChanged = (accounts)=>{\n        if (accounts.length === 0) {\n            setIsConnected(false);\n            setAccount(\"\");\n            setError(\"Wallet disconnected\");\n        } else {\n            setAccount(accounts[0]);\n            setError(\"\");\n            onConnect({\n                account: accounts[0],\n                chainId,\n                isCorrectChain: chainId === _core_utils__WEBPACK_IMPORTED_MODULE_4__.MORPH_CHAIN_ID\n            });\n        }\n    };\n    const handleChainChanged = (newChainId)=>{\n        setChainId(newChainId);\n        if (newChainId !== _core_utils__WEBPACK_IMPORTED_MODULE_4__.MORPH_CHAIN_ID) {\n            setError(\"Please switch to Morph Holesky Testnet\");\n        } else {\n            setError(\"\");\n        }\n    };\n    const connectWallet = async ()=>{\n        if (!window.ethereum) {\n            setError(\"MetaMask is not installed\");\n            onError(new Error(\"MetaMask is not installed\"));\n            return;\n        }\n        setIsConnecting(true);\n        setError(\"\");\n        try {\n            const accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\"\n            });\n            const currentChainId = await window.ethereum.request({\n                method: \"eth_chainId\"\n            });\n            if (accounts.length > 0) {\n                setAccount(accounts[0]);\n                setChainId(currentChainId);\n                setIsConnected(true);\n                if (currentChainId !== _core_utils__WEBPACK_IMPORTED_MODULE_4__.MORPH_CHAIN_ID) {\n                    await switchToMorphNetwork();\n                }\n                onConnect({\n                    account: accounts[0],\n                    chainId: currentChainId,\n                    isCorrectChain: currentChainId === _core_utils__WEBPACK_IMPORTED_MODULE_4__.MORPH_CHAIN_ID\n                });\n            }\n        } catch (err) {\n            console.error(\"Connection error:\", err);\n            const errorMessage = err.message || \"Failed to connect wallet\";\n            setError(errorMessage);\n            onError(err);\n        } finally{\n            setIsConnecting(false);\n        }\n    };\n    const switchToMorphNetwork = async ()=>{\n        try {\n            await window.ethereum.request({\n                method: \"wallet_switchEthereumChain\",\n                params: [\n                    {\n                        chainId: _core_utils__WEBPACK_IMPORTED_MODULE_4__.MORPH_CHAIN_ID\n                    }\n                ]\n            });\n        } catch (switchError) {\n            if (switchError.code === 4902) {\n                try {\n                    await window.ethereum.request({\n                        method: \"wallet_addEthereumChain\",\n                        params: [\n                            {\n                                chainId: _core_utils__WEBPACK_IMPORTED_MODULE_4__.MORPH_CHAIN_ID,\n                                chainName: \"Morph Holesky Testnet\",\n                                nativeCurrency: {\n                                    name: \"ETH\",\n                                    symbol: \"ETH\",\n                                    decimals: 18\n                                },\n                                rpcUrls: [\n                                    \"https://rpc-holesky.morphl2.io\"\n                                ],\n                                blockExplorerUrls: [\n                                    \"https://explorer-holesky.morphl2.io/\"\n                                ]\n                            }\n                        ]\n                    });\n                } catch (addError) {\n                    setError(\"Failed to add Morph Holesky Testnet\");\n                }\n            } else {\n                setError(\"Failed to switch to Morph Holesky Testnet\");\n            }\n        }\n    };\n    const handlePayment = async ()=>{\n        // Validation\n        if (!morphPay) {\n            setError(\"Payment system not initialized\");\n            return;\n        }\n        if (!amount || parseFloat(amount) <= 0) {\n            setError(\"Valid amount is required\");\n            return;\n        }\n        if (!recipient || !(0,_core_utils__WEBPACK_IMPORTED_MODULE_4__.isValidAddress)(recipient)) {\n            setError(\"Valid recipient address is required\");\n            return;\n        }\n        if (!isConnected) {\n            await connectWallet();\n            return;\n        }\n        if (chainId !== _core_utils__WEBPACK_IMPORTED_MODULE_4__.MORPH_CHAIN_ID) {\n            setError(\"Please switch to Morph Holesky Testnet\");\n            return;\n        }\n        if (contractExists === false) {\n            setError(\"Payment gateway contract not found\");\n            return;\n        }\n        if (paymentType === \"TOKEN\" && !tokenAddress) {\n            setError(\"Token address is required for token payments\");\n            return;\n        }\n        setIsProcessing(true);\n        setError(\"\");\n        try {\n            let payment;\n            if (paymentType === \"ETH\") {\n                payment = await morphPay.payWithETH(amount, recipient);\n            } else if (paymentType === \"TOKEN\") {\n                payment = await morphPay.payWithToken(tokenAddress, amount, recipient);\n            } else {\n                throw new Error(\"Invalid payment type\");\n            }\n            onSuccess({\n                transactionHash: payment.transactionHash,\n                amount,\n                recipient,\n                paymentType,\n                tokenAddress: paymentType === \"TOKEN\" ? tokenAddress : null\n            });\n        } catch (err) {\n            console.error(\"Payment error:\", err);\n            const errorMessage = err.message || \"Payment failed\";\n            setError(errorMessage);\n            onError(err);\n        } finally{\n            setIsProcessing(false);\n        }\n    };\n    // Determine button state and text\n    const getButtonState = ()=>{\n        if (disabled) return {\n            text: \"Disabled\",\n            disabled: true\n        };\n        if (isProcessing) return {\n            text: \"Processing...\",\n            disabled: true\n        };\n        if (isConnecting) return {\n            text: \"Connecting...\",\n            disabled: true\n        };\n        if (!isConnected) return {\n            text: \"Connect & Pay\",\n            disabled: false\n        };\n        if (chainId !== _core_utils__WEBPACK_IMPORTED_MODULE_4__.MORPH_CHAIN_ID) return {\n            text: \"Switch Network\",\n            disabled: false\n        };\n        if (contractExists === false) return {\n            text: \"Contract Not Found\",\n            disabled: true\n        };\n        if (contractExists === null) return {\n            text: \"Checking...\",\n            disabled: true\n        };\n        const defaultText = children || `Pay ${amount} ${paymentType}`;\n        return {\n            text: defaultText,\n            disabled: false\n        };\n    };\n    const buttonState = getButtonState();\n    const buttonStyle = {\n        backgroundColor: buttonState.disabled ? \"#cccccc\" : currentVariant.backgroundColor,\n        color: buttonState.disabled ? \"#666666\" : currentVariant.color,\n        border: currentVariant.border,\n        padding: currentSize.padding,\n        borderRadius: \"6px\",\n        fontSize: currentSize.fontSize,\n        fontWeight: \"600\",\n        cursor: buttonState.disabled ? \"not-allowed\" : \"pointer\",\n        opacity: buttonState.disabled ? 0.7 : 1,\n        transition: \"all 0.2s ease\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        gap: \"8px\",\n        outline: \"none\",\n        ...style\n    };\n    const handleMouseEnter = (e)=>{\n        if (!buttonState.disabled && currentVariant.hoverBg) {\n            e.target.style.backgroundColor = currentVariant.hoverBg;\n            if (currentVariant.hoverColor) {\n                e.target.style.color = currentVariant.hoverColor;\n            }\n        }\n    };\n    const handleMouseLeave = (e)=>{\n        if (!buttonState.disabled) {\n            e.target.style.backgroundColor = currentVariant.backgroundColor;\n            e.target.style.color = currentVariant.color;\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"jsx-d732791046adfab6\" + \" \" + \"morphpay-payment-button\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                onClick: handlePayment,\n                disabled: buttonState.disabled,\n                style: buttonStyle,\n                onMouseEnter: handleMouseEnter,\n                onMouseLeave: handleMouseLeave,\n                className: \"jsx-d732791046adfab6\" + \" \" + (className || \"\"),\n                children: [\n                    (isConnecting || isProcessing) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            width: currentSize.iconSize,\n                            height: currentSize.iconSize,\n                            border: \"2px solid transparent\",\n                            borderTop: \"2px solid currentColor\",\n                            borderRadius: \"50%\",\n                            animation: \"spin 1s linear infinite\"\n                        },\n                        className: \"jsx-d732791046adfab6\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\pritu\\\\OneDrive\\\\Desktop\\\\Dapps\\\\Payment-Gateway\\\\morph-pay-sdk\\\\morphpay-frontend\\\\src\\\\sdk\\\\components\\\\PaymentButton.jsx\",\n                        lineNumber: 356,\n                        columnNumber: 11\n                    }, undefined),\n                    !isConnected && !isConnecting && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_AlertCircle_CheckCircle_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                        size: currentSize.iconSize\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\pritu\\\\OneDrive\\\\Desktop\\\\Dapps\\\\Payment-Gateway\\\\morph-pay-sdk\\\\morphpay-frontend\\\\src\\\\sdk\\\\components\\\\PaymentButton.jsx\",\n                        lineNumber: 368,\n                        columnNumber: 11\n                    }, undefined),\n                    isConnected && !isProcessing && chainId === _core_utils__WEBPACK_IMPORTED_MODULE_4__.MORPH_CHAIN_ID && contractExists && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_AlertCircle_CheckCircle_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                        size: currentSize.iconSize\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\pritu\\\\OneDrive\\\\Desktop\\\\Dapps\\\\Payment-Gateway\\\\morph-pay-sdk\\\\morphpay-frontend\\\\src\\\\sdk\\\\components\\\\PaymentButton.jsx\",\n                        lineNumber: 371,\n                        columnNumber: 11\n                    }, undefined),\n                    error && !isProcessing && !isConnecting && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_AlertCircle_CheckCircle_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                        size: currentSize.iconSize\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\pritu\\\\OneDrive\\\\Desktop\\\\Dapps\\\\Payment-Gateway\\\\morph-pay-sdk\\\\morphpay-frontend\\\\src\\\\sdk\\\\components\\\\PaymentButton.jsx\",\n                        lineNumber: 374,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        className: \"jsx-d732791046adfab6\",\n                        children: buttonState.text\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\pritu\\\\OneDrive\\\\Desktop\\\\Dapps\\\\Payment-Gateway\\\\morph-pay-sdk\\\\morphpay-frontend\\\\src\\\\sdk\\\\components\\\\PaymentButton.jsx\",\n                        lineNumber: 376,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\pritu\\\\OneDrive\\\\Desktop\\\\Dapps\\\\Payment-Gateway\\\\morph-pay-sdk\\\\morphpay-frontend\\\\src\\\\sdk\\\\components\\\\PaymentButton.jsx\",\n                lineNumber: 347,\n                columnNumber: 7\n            }, undefined),\n            error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                style: {\n                    color: \"#dc3545\",\n                    marginTop: \"8px\",\n                    fontSize: \"14px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    gap: \"4px\"\n                },\n                className: \"jsx-d732791046adfab6\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_AlertCircle_CheckCircle_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                        size: 14\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\pritu\\\\OneDrive\\\\Desktop\\\\Dapps\\\\Payment-Gateway\\\\morph-pay-sdk\\\\morphpay-frontend\\\\src\\\\sdk\\\\components\\\\PaymentButton.jsx\",\n                        lineNumber: 388,\n                        columnNumber: 11\n                    }, undefined),\n                    error\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\pritu\\\\OneDrive\\\\Desktop\\\\Dapps\\\\Payment-Gateway\\\\morph-pay-sdk\\\\morphpay-frontend\\\\src\\\\sdk\\\\components\\\\PaymentButton.jsx\",\n                lineNumber: 380,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default()), {\n                id: \"d732791046adfab6\",\n                children: \"@-webkit-keyframes spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-moz-keyframes spin{0%{-moz-transform:rotate(0deg);transform:rotate(0deg)}100%{-moz-transform:rotate(360deg);transform:rotate(360deg)}}@-o-keyframes spin{0%{-o-transform:rotate(0deg);transform:rotate(0deg)}100%{-o-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes spin{0%{-webkit-transform:rotate(0deg);-moz-transform:rotate(0deg);-o-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(360deg);-moz-transform:rotate(360deg);-o-transform:rotate(360deg);transform:rotate(360deg)}}\"\n            }, void 0, false, void 0, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\pritu\\\\OneDrive\\\\Desktop\\\\Dapps\\\\Payment-Gateway\\\\morph-pay-sdk\\\\morphpay-frontend\\\\src\\\\sdk\\\\components\\\\PaymentButton.jsx\",\n        lineNumber: 346,\n        columnNumber: 5\n    }, undefined);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PaymentButton);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./sdk/components/PaymentButton.jsx\n");

/***/ }),

/***/ "./sdk/core/MorphPay.js":
/*!******************************!*\
  !*** ./sdk/core/MorphPay.js ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var web3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3 */ \"web3\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([web3__WEBPACK_IMPORTED_MODULE_0__]);\nweb3__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// Contract configuration\nconst CONTRACT_CONFIG = {\n    PAYMENT_GATEWAY_ADDRESS: process.env.NEXT_PUBLIC_CONTRACT_ADDRESS || \"0xaF673968bd6b1c373670c9e82bc8B9059d5037F4\",\n    USDT_ADDRESS: process.env.NEXT_PUBLIC_USDT_ADDRESS || \"0x65aFADD39029741B3b8f0756952C74678c9cEC93\",\n    USDC_ADDRESS: process.env.NEXT_PUBLIC_USDC_ADDRESS || \"0x69f66FFbb39Bfe6538d870Bd483999A6C7442B58\",\n    MORPH_CHAIN_ID: \"0xafa\",\n    MORPH_CHAIN_ID_DECIMAL: 2810,\n    MORPH_RPC_URL: \"https://rpc-holesky.morphl2.io\",\n    MORPH_EXPLORER_BASE: \"https://explorer-holesky.morphl2.io/tx/\"\n};\n// Payment Gateway ABI - Full ABI from PaymentGateway.json\nconst PAYMENT_GATEWAY_ABI = [\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_feeRecipient\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"constructor\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"DailyLimitExceeded\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"EnforcedPause\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"ExpectedPause\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"FeeTooHigh\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"InvalidAddress\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"InvalidAmount\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"owner\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"OwnableInvalidOwner\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"account\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"OwnableUnauthorizedAccount\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"PaymentAlreadyProcessed\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"PaymentTooSmall\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"ReentrancyGuardReentrantCall\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"token\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"SafeERC20FailedOperation\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"TokenNotSupported\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"TransferFailed\",\n        \"type\": \"error\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"oldLimit\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"newLimit\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"DailyLimitUpdated\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"token\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"to\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"EmergencyWithdrawal\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"oldRecipient\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"newRecipient\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"FeeRecipientUpdated\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"oldFee\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"newFee\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"FeeUpdated\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"oldMin\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"newMin\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"MinPaymentUpdated\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"previousOwner\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"newOwner\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"OwnershipTransferred\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"account\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"Paused\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"bytes32\",\n                \"name\": \"paymentId\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"payer\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"vendor\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"token\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"amountNet\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"fee\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"timestamp\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"PaymentSettled\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"token\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"bool\",\n                \"name\": \"supported\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"name\": \"TokenSupported\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"account\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"Unpaused\",\n        \"type\": \"event\"\n    },\n    {\n        \"stateMutability\": \"payable\",\n        \"type\": \"fallback\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"MAX_FEE_BPS\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"MIN_PAYMENT_AMOUNT\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address[]\",\n                \"name\": \"tokens\",\n                \"type\": \"address[]\"\n            },\n            {\n                \"internalType\": \"uint256[]\",\n                \"name\": \"amounts\",\n                \"type\": \"uint256[]\"\n            },\n            {\n                \"internalType\": \"address[]\",\n                \"name\": \"vendors\",\n                \"type\": \"address[]\"\n            },\n            {\n                \"internalType\": \"bytes32[]\",\n                \"name\": \"paymentIds\",\n                \"type\": \"bytes32[]\"\n            }\n        ],\n        \"name\": \"batchPayWithTokens\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"calculateFee\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"calculateNetAmount\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"dailyPaymentLimit\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"dailyPaymentVolume\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"disableEmergencyWithdrawal\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"emergencyBalance\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"token\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"to\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"emergencyWithdraw\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"emergencyWithdrawalEnabled\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"enableEmergencyWithdrawal\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"feeBps\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"feeRecipient\",\n        \"outputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"dayTimestamp\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"getDailyVolume\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"getRemainingDailyLimit\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"getTodayVolume\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"owner\",\n        \"outputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"pause\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"paused\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"vendor\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"paymentId\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"payWithETH\",\n        \"outputs\": [],\n        \"stateMutability\": \"payable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"token\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"vendor\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"paymentId\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"payWithToken\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"processedPayments\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"renounceOwnership\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"newLimit\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"setDailyPaymentLimit\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"newFeeBps\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"setFeeBps\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"newRecipient\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"setFeeRecipient\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"token\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"supported\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"name\": \"setSupportedToken\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"supportedTokens\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"newOwner\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"transferOwnership\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"unpause\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"vendorPayments\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"stateMutability\": \"payable\",\n        \"type\": \"receive\"\n    }\n];\n// ERC20 Token ABI\nconst ERC20_ABI = [\n    {\n        \"type\": \"function\",\n        \"name\": \"balanceOf\",\n        \"inputs\": [\n            {\n                \"name\": \"owner\",\n                \"type\": \"address\"\n            }\n        ],\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\"\n    },\n    {\n        \"type\": \"function\",\n        \"name\": \"decimals\",\n        \"inputs\": [],\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"uint8\"\n            }\n        ],\n        \"stateMutability\": \"view\"\n    },\n    {\n        \"type\": \"function\",\n        \"name\": \"symbol\",\n        \"inputs\": [],\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"string\"\n            }\n        ],\n        \"stateMutability\": \"view\"\n    },\n    {\n        \"type\": \"function\",\n        \"name\": \"name\",\n        \"inputs\": [],\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"string\"\n            }\n        ],\n        \"stateMutability\": \"view\"\n    },\n    {\n        \"type\": \"function\",\n        \"name\": \"approve\",\n        \"inputs\": [\n            {\n                \"name\": \"spender\",\n                \"type\": \"address\"\n            },\n            {\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\"\n    },\n    {\n        \"type\": \"function\",\n        \"name\": \"allowance\",\n        \"inputs\": [\n            {\n                \"name\": \"owner\",\n                \"type\": \"address\"\n            },\n            {\n                \"name\": \"spender\",\n                \"type\": \"address\"\n            }\n        ],\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\"\n    },\n    {\n        \"type\": \"function\",\n        \"name\": \"transfer\",\n        \"inputs\": [\n            {\n                \"name\": \"to\",\n                \"type\": \"address\"\n            },\n            {\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\"\n    },\n    {\n        \"type\": \"function\",\n        \"name\": \"mintTo\",\n        \"inputs\": [\n            {\n                \"name\": \"to\",\n                \"type\": \"address\"\n            }\n        ],\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\"\n    },\n    {\n        \"type\": \"function\",\n        \"name\": \"lastMinted\",\n        \"inputs\": [\n            {\n                \"name\": \"user\",\n                \"type\": \"address\"\n            }\n        ],\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\"\n    }\n];\nclass MorphPay {\n    constructor(options = {}){\n        this.contractAddress = options.contractAddress || CONTRACT_CONFIG.PAYMENT_GATEWAY_ADDRESS;\n        this.rpcUrl = options.rpcUrl || CONTRACT_CONFIG.MORPH_RPC_URL;\n        this.chainId = options.chainId || CONTRACT_CONFIG.MORPH_CHAIN_ID;\n        this.chainIdDecimal = options.chainIdDecimal || CONTRACT_CONFIG.MORPH_CHAIN_ID_DECIMAL;\n        this.explorerBase = options.explorerBase || CONTRACT_CONFIG.MORPH_EXPLORER_BASE;\n        this.web3 = null;\n        this.contract = null;\n        this.account = \"\";\n        this.isConnected = false;\n        this.contractInfo = {\n            exists: null,\n            paused: false,\n            feeBps: \"50\",\n            feeRecipient: \"\",\n            dailyLimit: \"0\",\n            todayVolume: \"0\",\n            minPayment: \"0\",\n            maxFeeBps: \"1000\",\n            remainingDailyLimit: \"0\"\n        };\n        if (!this.contractAddress) {\n            throw new Error(\"PaymentGateway contract address is required\");\n        }\n    }\n    // Initialize Web3 and connect wallet\n    async initializeWeb3() {\n        if (false) {}\n        throw new Error(\"MetaMask not found\");\n    }\n    // Check if MetaMask is installed\n    isMetaMaskInstalled() {\n        return  false && 0;\n    }\n    // Validate Ethereum address\n    isValidAddress(address) {\n        return /^0x[a-fA-F0-9]{40}$/.test(address);\n    }\n    // Handle account changes\n    handleAccountsChanged(accounts) {\n        if (accounts.length === 0) {\n            this.isConnected = false;\n            this.account = \"\";\n        } else {\n            this.account = accounts[0];\n            if (this.web3) {\n                this.getBalance(accounts[0]);\n            }\n        }\n    }\n    // Handle chain changes\n    handleChainChanged(newChainId) {\n        if (newChainId === this.chainId) {\n            if (this.web3 && this.contract) {\n                this.checkContract();\n            }\n        }\n    }\n    // Connect wallet\n    async connectWallet() {\n        if (!this.isMetaMaskInstalled()) {\n            throw new Error(\"MetaMask is not installed. Please install MetaMask to continue.\");\n        }\n        if (!this.web3) await this.initializeWeb3();\n        try {\n            const accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\"\n            });\n            this.account = accounts[0];\n            this.isConnected = true;\n            const currentChainId = await window.ethereum.request({\n                method: \"eth_chainId\"\n            });\n            if (currentChainId !== this.chainId) {\n                await this.switchToMorphNetwork();\n            }\n            await this.getBalance(this.account);\n            await this.checkContract();\n            return {\n                account: this.account,\n                chainId: currentChainId\n            };\n        } catch (error) {\n            throw new Error(`Failed to connect wallet: ${error.message}`);\n        }\n    }\n    // Switch to Morph network\n    async switchToMorphNetwork() {\n        try {\n            await window.ethereum.request({\n                method: \"wallet_switchEthereumChain\",\n                params: [\n                    {\n                        chainId: this.chainId\n                    }\n                ]\n            });\n        } catch (switchError) {\n            if (switchError.code === 4902) {\n                try {\n                    await window.ethereum.request({\n                        method: \"wallet_addEthereumChain\",\n                        params: [\n                            {\n                                chainId: this.chainId,\n                                chainName: \"Morph Holesky Testnet\",\n                                nativeCurrency: {\n                                    name: \"ETH\",\n                                    symbol: \"ETH\",\n                                    decimals: 18\n                                },\n                                rpcUrls: [\n                                    this.rpcUrl\n                                ],\n                                blockExplorerUrls: [\n                                    \"https://explorer-holesky.morphl2.io/\"\n                                ]\n                            }\n                        ]\n                    });\n                } catch (addError) {\n                    throw new Error(\"Failed to add Morph Holesky Testnet to MetaMask\");\n                }\n            } else {\n                throw new Error(\"Failed to switch to Morph Holesky Testnet\");\n            }\n        }\n    }\n    // Get ETH balance\n    async getBalance(address = this.account) {\n        if (!this.web3 || !address || !this.isValidAddress(address)) return \"0\";\n        try {\n            const balance = await this.web3.eth.getBalance(address);\n            const ethBalance = this.web3.utils.fromWei(balance, \"ether\");\n            return parseFloat(ethBalance).toFixed(4);\n        } catch (error) {\n            console.error(\"Failed to get balance:\", error);\n            return \"0\";\n        }\n    }\n    // Get token balance\n    async getTokenBalance(tokenAddress, userAddress = this.account) {\n        if (!this.web3 || !tokenAddress || !userAddress) return {\n            balance: \"0\",\n            decimals: 18,\n            symbol: \"TOKEN\"\n        };\n        try {\n            const tokenContract = new this.web3.eth.Contract(ERC20_ABI, tokenAddress);\n            const [balance, decimals, symbol] = await Promise.all([\n                tokenContract.methods.balanceOf(userAddress).call(),\n                tokenContract.methods.decimals().call(),\n                tokenContract.methods.symbol().call()\n            ]);\n            const formattedBalance = this.web3.utils.fromWei(balance.toString(), decimals === 6 ? \"mwei\" : \"ether\");\n            return {\n                balance: formattedBalance,\n                decimals: parseInt(decimals),\n                symbol,\n                raw: balance.toString()\n            };\n        } catch (error) {\n            console.error(\"Failed to get token balance:\", error);\n            return {\n                balance: \"0\",\n                decimals: 18,\n                symbol: \"TOKEN\"\n            };\n        }\n    }\n    // Check contract status\n    async checkContract() {\n        try {\n            if (!this.isValidAddress(this.contractAddress)) {\n                this.contractInfo.exists = false;\n                return this.contractInfo;\n            }\n            const currentChainId = await window.ethereum.request({\n                method: \"eth_chainId\"\n            });\n            if (currentChainId !== this.chainId) {\n                this.contractInfo.exists = null;\n                return this.contractInfo;\n            }\n            const code = await this.web3.eth.getCode(this.contractAddress);\n            const exists = code && code !== \"0x\" && code !== \"0x0\";\n            if (exists && this.contract) {\n                try {\n                    const [paused, feeBps, feeRecipient, dailyLimit, todayVolume, minPayment, maxFeeBps, remainingDailyLimit] = await Promise.all([\n                        this.contract.methods.paused().call(),\n                        this.contract.methods.feeBps().call(),\n                        this.contract.methods.feeRecipient().call(),\n                        this.contract.methods.dailyPaymentLimit().call(),\n                        this.contract.methods.getTodayVolume().call(),\n                        this.contract.methods.MIN_PAYMENT_AMOUNT().call(),\n                        this.contract.methods.MAX_FEE_BPS().call(),\n                        this.contract.methods.getRemainingDailyLimit().call()\n                    ]);\n                    this.contractInfo = {\n                        exists: true,\n                        paused,\n                        feeBps: feeBps.toString(),\n                        feeRecipient,\n                        dailyLimit: this.web3.utils.fromWei(dailyLimit, \"ether\"),\n                        todayVolume: this.web3.utils.fromWei(todayVolume, \"ether\"),\n                        minPayment: this.web3.utils.fromWei(minPayment, \"ether\"),\n                        maxFeeBps: maxFeeBps.toString(),\n                        remainingDailyLimit: this.web3.utils.fromWei(remainingDailyLimit, \"ether\")\n                    };\n                } catch (error) {\n                    console.error(\"Error getting contract info:\", error);\n                    this.contractInfo.exists = true;\n                }\n            } else {\n                this.contractInfo.exists = false;\n            }\n            return this.contractInfo;\n        } catch (error) {\n            console.error(\"Error checking contract:\", error);\n            this.contractInfo.exists = false;\n            return this.contractInfo;\n        }\n    }\n    // Calculate fees\n    async calculateFee(amount) {\n        if (!this.contract || !amount || isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {\n            return {\n                fee: \"0\",\n                net: \"0\"\n            };\n        }\n        try {\n            const amountWei = this.web3.utils.toWei(amount.toString(), \"ether\");\n            const [fee, net] = await Promise.all([\n                this.contract.methods.calculateFee(amountWei).call(),\n                this.contract.methods.calculateNetAmount(amountWei).call()\n            ]);\n            return {\n                fee: this.web3.utils.fromWei(fee.toString(), \"ether\"),\n                net: this.web3.utils.fromWei(net.toString(), \"ether\")\n            };\n        } catch (error) {\n            // Fallback calculation\n            const amountNum = parseFloat(amount);\n            const feePercent = parseFloat(this.contractInfo.feeBps) / 10000;\n            const feeAmount = amountNum * feePercent;\n            const netAmount = amountNum - feeAmount;\n            return {\n                fee: feeAmount.toFixed(6),\n                net: netAmount.toFixed(6)\n            };\n        }\n    }\n    // Pay with ETH\n    // Pay with ETH - FIXED VERSION\n    async payWithETH(vendor, amount) {\n        if (!this.isConnected) throw new Error(\"Wallet not connected\");\n        if (!this.isValidAddress(vendor)) throw new Error(\"Invalid vendor address\");\n        if (!this.contractInfo.exists) throw new Error(\"Payment gateway contract not found\");\n        if (this.contractInfo.paused) throw new Error(\"Payment gateway is currently paused\");\n        const amountNum = parseFloat(amount);\n        if (isNaN(amountNum) || amountNum <= 0) throw new Error(\"Invalid amount\");\n        const minPayment = parseFloat(this.contractInfo.minPayment);\n        if (amountNum < minPayment) throw new Error(`Minimum payment amount is ${minPayment} ETH`);\n        try {\n            // Generate a unique paymentId (this is what was missing!)\n            const paymentId = this.web3.utils.randomHex(32);\n            const amountWei = this.web3.utils.toWei(amount.toString(), \"ether\");\n            // Estimate gas for the transaction\n            const gasEstimate = await this.contract.methods.payWithETH(vendor, paymentId).estimateGas({\n                from: this.account,\n                value: amountWei\n            });\n            // Execute the transaction with correct parameters: vendor and paymentId\n            // The amount goes in the 'value' field, not as a parameter\n            const tx = await this.contract.methods.payWithETH(vendor, paymentId).send({\n                from: this.account,\n                value: amountWei,\n                gas: Math.floor(Number(gasEstimate) * 1.2)\n            });\n            return {\n                transactionHash: tx.transactionHash,\n                paymentId,\n                explorerUrl: `${this.explorerBase}${tx.transactionHash}`\n            };\n        } catch (error) {\n            if (error.message.includes(\"insufficient funds\")) {\n                throw new Error(\"Insufficient ETH balance for this transaction\");\n            } else if (error.message.includes(\"User denied\") || error.message.includes(\"rejected\")) {\n                throw new Error(\"Transaction was rejected by user\");\n            } else if (error.message.includes(\"DailyLimitExceeded\")) {\n                throw new Error(\"Daily payment limit exceeded\");\n            } else if (error.message.includes(\"PaymentTooSmall\")) {\n                throw new Error(`Payment amount is below minimum of ${this.contractInfo.minPayment} ETH`);\n            } else if (error.message.includes(\"EnforcedPause\")) {\n                throw new Error(\"Payment gateway is currently paused\");\n            } else if (error.message.includes(\"PaymentAlreadyProcessed\")) {\n                throw new Error(\"This payment has already been processed\");\n            } else {\n                throw new Error(`Payment failed: ${error.message}`);\n            }\n        }\n    }\n    // Pay with Token\n    async payWithToken(tokenAddress, amount, vendor) {\n        if (!this.isConnected) throw new Error(\"Wallet not connected\");\n        if (!this.isValidAddress(vendor)) throw new Error(\"Invalid vendor address\");\n        if (!this.isValidAddress(tokenAddress)) throw new Error(\"Invalid token address\");\n        try {\n            // Check if token is supported\n            const isSupported = await this.contract.methods.supportedTokens(tokenAddress).call();\n            if (!isSupported) {\n                throw new Error(\"Token is not supported by the payment gateway\");\n            }\n            // Get token info\n            const tokenContract = new this.web3.eth.Contract(ERC20_ABI, tokenAddress);\n            const decimals = await tokenContract.methods.decimals().call();\n            // Convert amount based on token decimals\n            const amountWei = decimals === 6 ? this.web3.utils.toWei(amount.toString(), \"mwei\") // For USDT (6 decimals)\n             : this.web3.utils.toWei(amount.toString(), \"ether\") // For USDC and others (18 decimals)\n            ;\n            // Check allowance\n            const allowance = await tokenContract.methods.allowance(this.account, this.contractAddress).call();\n            if (this.web3.utils.toBN(allowance).lt(this.web3.utils.toBN(amountWei))) {\n                // Approve token spending\n                const approveTx = await tokenContract.methods.approve(this.contractAddress, amountWei).send({\n                    from: this.account\n                });\n                console.log(\"Token approval transaction:\", approveTx.transactionHash);\n            }\n            // Process payment\n            const paymentId = this.web3.utils.randomHex(32);\n            const tx = await this.contract.methods.payWithToken(tokenAddress, amountWei, vendor, paymentId).send({\n                from: this.account\n            });\n            return {\n                transactionHash: tx.transactionHash,\n                paymentId,\n                explorerUrl: `${this.explorerBase}${tx.transactionHash}`\n            };\n        } catch (error) {\n            if (error.message.includes(\"User denied\") || error.message.includes(\"rejected\")) {\n                throw new Error(\"Transaction was rejected by user\");\n            } else if (error.message.includes(\"TokenNotSupported\")) {\n                throw new Error(\"Token is not supported by the payment gateway\");\n            } else if (error.message.includes(\"DailyLimitExceeded\")) {\n                throw new Error(\"Daily payment limit exceeded\");\n            } else if (error.message.includes(\"EnforcedPause\")) {\n                throw new Error(\"Payment gateway is currently paused\");\n            } else {\n                throw new Error(`Token payment failed: ${error.message}`);\n            }\n        }\n    }\n    // Batch payment with tokens\n    async batchPayWithTokens(payments) {\n        if (!this.isConnected) throw new Error(\"Wallet not connected\");\n        if (!Array.isArray(payments) || payments.length === 0) throw new Error(\"Invalid payments array\");\n        try {\n            const tokens = [];\n            const amounts = [];\n            const vendors = [];\n            const paymentIds = [];\n            for (const payment of payments){\n                if (!this.isValidAddress(payment.vendor)) throw new Error(`Invalid vendor address: ${payment.vendor}`);\n                if (!this.isValidAddress(payment.token)) throw new Error(`Invalid token address: ${payment.token}`);\n                const tokenContract = new this.web3.eth.Contract(ERC20_ABI, payment.token);\n                const decimals = await tokenContract.methods.decimals().call();\n                const amountWei = decimals === 6 ? this.web3.utils.toWei(payment.amount.toString(), \"mwei\") : this.web3.utils.toWei(payment.amount.toString(), \"ether\");\n                tokens.push(payment.token);\n                amounts.push(amountWei);\n                vendors.push(payment.vendor);\n                paymentIds.push(this.web3.utils.randomHex(32));\n            }\n            const tx = await this.contract.methods.batchPayWithTokens(tokens, amounts, vendors, paymentIds).send({\n                from: this.account\n            });\n            return {\n                transactionHash: tx.transactionHash,\n                paymentIds,\n                explorerUrl: `${this.explorerBase}${tx.transactionHash}`\n            };\n        } catch (error) {\n            throw new Error(`Batch payment failed: ${error.message}`);\n        }\n    }\n    // Mint test tokens\n    async mintToken(tokenAddress) {\n        if (!this.isConnected) throw new Error(\"Wallet not connected\");\n        if (!this.isValidAddress(tokenAddress)) throw new Error(\"Invalid token address\");\n        try {\n            const tokenContract = new this.web3.eth.Contract(ERC20_ABI, tokenAddress);\n            // Check if user can mint (24h cooldown)\n            const lastMinted = await tokenContract.methods.lastMinted(this.account).call();\n            const canMint = Date.now() / 1000 - lastMinted > 86400;\n            if (!canMint) {\n                const timeLeft = 86400 - (Date.now() / 1000 - lastMinted);\n                const hoursLeft = Math.ceil(timeLeft / 3600);\n                throw new Error(`You can mint again in ${hoursLeft} hours`);\n            }\n            const tx = await tokenContract.methods.mintTo(this.account).send({\n                from: this.account\n            });\n            return {\n                transactionHash: tx.transactionHash,\n                explorerUrl: `${this.explorerBase}${tx.transactionHash}`\n            };\n        } catch (error) {\n            throw new Error(`Token minting failed: ${error.message}`);\n        }\n    }\n    // Generate QR code for mobile payments\n    generateQRCode(vendor, amount) {\n        if (!this.isValidAddress(vendor)) throw new Error(\"Invalid vendor address\");\n        if (!amount || parseFloat(amount) <= 0) throw new Error(\"Invalid amount\");\n        const amountWei = this.web3 ? this.web3.utils.toWei(amount.toString(), \"ether\") : (parseFloat(amount) * 1e18).toString();\n        const uri = `ethereum:${vendor}@${this.chainIdDecimal}?value=${amountWei}`;\n        return {\n            uri,\n            qrUrl: `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(uri)}`,\n            fallbackUrl: `https://chart.googleapis.com/chart?chs=200x200&cht=qr&chl=${encodeURIComponent(uri)}`\n        };\n    }\n    // Check if token is supported\n    async isTokenSupported(tokenAddress) {\n        if (!this.contract || !this.isValidAddress(tokenAddress)) return false;\n        try {\n            return await this.contract.methods.supportedTokens(tokenAddress).call();\n        } catch (error) {\n            console.error(\"Error checking token support:\", error);\n            return false;\n        }\n    }\n    // Get daily volume for a specific date\n    async getDailyVolume(dayTimestamp) {\n        if (!this.contract) return \"0\";\n        try {\n            const volume = await this.contract.methods.getDailyVolume(dayTimestamp).call();\n            return this.web3.utils.fromWei(volume, \"ether\");\n        } catch (error) {\n            console.error(\"Error getting daily volume:\", error);\n            return \"0\";\n        }\n    }\n    // Get vendor payments total\n    async getVendorPayments(vendorAddress) {\n        if (!this.contract || !this.isValidAddress(vendorAddress)) return \"0\";\n        try {\n            const payments = await this.contract.methods.vendorPayments(vendorAddress).call();\n            return this.web3.utils.fromWei(payments, \"ether\");\n        } catch (error) {\n            console.error(\"Error getting vendor payments:\", error);\n            return \"0\";\n        }\n    }\n    // Check if payment ID has been processed\n    async isPaymentProcessed(paymentId) {\n        if (!this.contract || !paymentId) return false;\n        try {\n            return await this.contract.methods.processedPayments(paymentId).call();\n        } catch (error) {\n            console.error(\"Error checking payment status:\", error);\n            return false;\n        }\n    }\n    // Get contract owner\n    async getOwner() {\n        if (!this.contract) return null;\n        try {\n            return await this.contract.methods.owner().call();\n        } catch (error) {\n            console.error(\"Error getting contract owner:\", error);\n            return null;\n        }\n    }\n    // Get emergency withdrawal status\n    async getEmergencyWithdrawalStatus() {\n        if (!this.contract) return false;\n        try {\n            return await this.contract.methods.emergencyWithdrawalEnabled().call();\n        } catch (error) {\n            console.error(\"Error getting emergency withdrawal status:\", error);\n            return false;\n        }\n    }\n    // Get emergency balance for a token\n    async getEmergencyBalance(tokenAddress) {\n        if (!this.contract || !this.isValidAddress(tokenAddress)) return \"0\";\n        try {\n            const balance = await this.contract.methods.emergencyBalance(tokenAddress).call();\n            return this.web3.utils.fromWei(balance, \"ether\");\n        } catch (error) {\n            console.error(\"Error getting emergency balance:\", error);\n            return \"0\";\n        }\n    }\n    // Get contract addresses\n    getContractAddresses() {\n        return {\n            paymentGateway: this.contractAddress,\n            usdt: CONTRACT_CONFIG.USDT_ADDRESS,\n            usdc: CONTRACT_CONFIG.USDC_ADDRESS\n        };\n    }\n    // Get network info\n    getNetworkInfo() {\n        return {\n            chainId: this.chainId,\n            chainIdDecimal: this.chainIdDecimal,\n            rpcUrl: this.rpcUrl,\n            explorerBase: this.explorerBase,\n            name: \"Morph Holesky Testnet\"\n        };\n    }\n    // Listen to contract events\n    subscribeToEvents(eventName, callback, fromBlock = \"latest\") {\n        if (!this.contract) {\n            throw new Error(\"Contract not initialized\");\n        }\n        const eventEmitter = this.contract.events[eventName]({\n            fromBlock: fromBlock\n        });\n        eventEmitter.on(\"data\", callback);\n        eventEmitter.on(\"error\", (error)=>{\n            console.error(`Error in ${eventName} event:`, error);\n        });\n        return eventEmitter;\n    }\n    // Cleanup event listeners\n    cleanup() {\n        if (false) {}\n    }\n}\n// Browser-specific additions - Payment Form Helper\nMorphPay.prototype.createPaymentForm = function(containerId, options = {}) {\n    const container = document.getElementById(containerId);\n    if (!container) {\n        throw new Error(`Container with id \"${containerId}\" not found`);\n    }\n    const form = document.createElement(\"form\");\n    form.innerHTML = `\r\n    <div class=\"morphpay-form\" style=\"max-width: 400px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px;\">\r\n      <h3>MorphPay Payment</h3>\r\n      \r\n      <div class=\"form-group\" style=\"margin-bottom: 15px;\">\r\n        <label style=\"display: block; margin-bottom: 5px;\">Payment Type:</label>\r\n        <select name=\"paymentType\" style=\"width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;\">\r\n          <option value=\"ETH\">ETH</option>\r\n          <option value=\"USDT\">USDT</option>\r\n          <option value=\"USDC\">USDC</option>\r\n        </select>\r\n      </div>\r\n      \r\n      <div class=\"form-group\" style=\"margin-bottom: 15px;\">\r\n        <label style=\"display: block; margin-bottom: 5px;\">Amount:</label>\r\n        <input type=\"number\" name=\"amount\" step=\"0.001\" min=\"0.001\" placeholder=\"0.01\" required \r\n               style=\"width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;\" />\r\n      </div>\r\n      \r\n      <div class=\"form-group\" style=\"margin-bottom: 15px;\">\r\n        <label style=\"display: block; margin-bottom: 5px;\">Vendor Address:</label>\r\n        <input type=\"text\" name=\"vendor\" placeholder=\"0x...\" required \r\n               style=\"width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; font-family: monospace;\" />\r\n      </div>\r\n      \r\n      <div class=\"form-group\" style=\"margin-bottom: 15px;\">\r\n        <div id=\"connection-status\" style=\"padding: 10px; background: #f0f0f0; border-radius: 4px; text-align: center;\">\r\n          <span>Not connected</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <button type=\"button\" id=\"connect-wallet\" \r\n              style=\"width: 100%; padding: 10px; background: #007cba; color: white; border: none; border-radius: 4px; margin-bottom: 10px; cursor: pointer;\">\r\n        Connect Wallet\r\n      </button>\r\n      \r\n      <button type=\"submit\" disabled\r\n              style=\"width: 100%; padding: 10px; background: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer; opacity: 0.5;\">\r\n        Pay Now\r\n      </button>\r\n      \r\n      <div id=\"status-messages\" style=\"margin-top: 15px;\"></div>\r\n    </div>\r\n  `;\n    const connectBtn = form.querySelector(\"#connect-wallet\");\n    const submitBtn = form.querySelector('button[type=\"submit\"]');\n    const statusDiv = form.querySelector(\"#connection-status span\");\n    const messagesDiv = form.querySelector(\"#status-messages\");\n    const showMessage = (message, type = \"info\")=>{\n        const colors = {\n            success: \"#d4edda\",\n            error: \"#f8d7da\",\n            info: \"#d1ecf1\"\n        };\n        messagesDiv.innerHTML = `<div style=\"padding: 10px; background: ${colors[type]}; border-radius: 4px; margin-top: 10px;\">${message}</div>`;\n    };\n    connectBtn.addEventListener(\"click\", async ()=>{\n        try {\n            connectBtn.disabled = true;\n            connectBtn.textContent = \"Connecting...\";\n            const result = await this.connectWallet();\n            submitBtn.disabled = false;\n            submitBtn.style.opacity = \"1\";\n            connectBtn.textContent = `Connected: ${result.account.slice(0, 6)}...${result.account.slice(-4)}`;\n            statusDiv.textContent = `Connected to ${result.account.slice(0, 6)}...${result.account.slice(-4)}`;\n            statusDiv.parentElement.style.background = \"#d4edda\";\n            showMessage(\"Wallet connected successfully!\", \"success\");\n        } catch (error) {\n            connectBtn.disabled = false;\n            connectBtn.textContent = \"Connect Wallet\";\n            showMessage(`Connection failed: ${error.message}`, \"error\");\n            if (options.onError) options.onError(error);\n        }\n    });\n    form.addEventListener(\"submit\", async (e)=>{\n        e.preventDefault();\n        const formData = new FormData(form);\n        const paymentType = formData.get(\"paymentType\");\n        const amount = formData.get(\"amount\");\n        const vendor = formData.get(\"vendor\");\n        try {\n            submitBtn.disabled = true;\n            submitBtn.textContent = \"Processing...\";\n            showMessage(\"Processing payment...\", \"info\");\n            let result;\n            if (paymentType === \"ETH\") {\n                result = await this.payWithETH(vendor, amount);\n            } else if (paymentType === \"USDT\") {\n                result = await this.payWithToken(CONTRACT_CONFIG.USDT_ADDRESS, amount, vendor);\n            } else if (paymentType === \"USDC\") {\n                result = await this.payWithToken(CONTRACT_CONFIG.USDC_ADDRESS, amount, vendor);\n            }\n            showMessage(`Payment successful! <a href=\"${result.explorerUrl}\" target=\"_blank\">View Transaction</a>`, \"success\");\n            if (options.onSuccess) options.onSuccess(result);\n        } catch (error) {\n            showMessage(`Payment failed: ${error.message}`, \"error\");\n            if (options.onError) options.onError(error);\n        } finally{\n            submitBtn.disabled = false;\n            submitBtn.textContent = \"Pay Now\";\n        }\n    });\n    container.appendChild(form);\n    return form;\n};\n// Export for different environments\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MorphPay);\n// Only add to window in browser environments, after export\nif (false) {}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./sdk/core/MorphPay.js\n");

/***/ }),

/***/ "./sdk/core/utils.js":
/*!***************************!*\
  !*** ./sdk/core/utils.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MORPH_CHAIN_ID: () => (/* binding */ MORPH_CHAIN_ID),\n/* harmony export */   MORPH_CHAIN_ID_DECIMAL: () => (/* binding */ MORPH_CHAIN_ID_DECIMAL),\n/* harmony export */   MORPH_NETWORK_CONFIG: () => (/* binding */ MORPH_NETWORK_CONFIG),\n/* harmony export */   SUPPORTED_CHAINS: () => (/* binding */ SUPPORTED_CHAINS),\n/* harmony export */   debounce: () => (/* binding */ debounce),\n/* harmony export */   deepMerge: () => (/* binding */ deepMerge),\n/* harmony export */   detectWallet: () => (/* binding */ detectWallet),\n/* harmony export */   encodeContractCall: () => (/* binding */ encodeContractCall),\n/* harmony export */   estimateGasPrice: () => (/* binding */ estimateGasPrice),\n/* harmony export */   formatEther: () => (/* binding */ formatEther),\n/* harmony export */   fromWei: () => (/* binding */ fromWei),\n/* harmony export */   generateDeploymentData: () => (/* binding */ generateDeploymentData),\n/* harmony export */   generateId: () => (/* binding */ generateId),\n/* harmony export */   getBrowserInfo: () => (/* binding */ getBrowserInfo),\n/* harmony export */   getChainInfo: () => (/* binding */ getChainInfo),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isValidAddress: () => (/* binding */ isValidAddress),\n/* harmony export */   isValidChainId: () => (/* binding */ isValidChainId),\n/* harmony export */   isValidTxHash: () => (/* binding */ isValidTxHash),\n/* harmony export */   isWalletConnected: () => (/* binding */ isWalletConnected),\n/* harmony export */   toWei: () => (/* binding */ toWei),\n/* harmony export */   validateAmount: () => (/* binding */ validateAmount),\n/* harmony export */   validateWeb3PaymentData: () => (/* binding */ validateWeb3PaymentData)\n/* harmony export */ });\n// Web3 Utility functions for MorphPay SDK\n// Supported blockchain networks\nconst SUPPORTED_CHAINS = {\n    MORPH_HOLESKY: {\n        id: 2810,\n        name: \"Morph Holesky\",\n        rpcUrl: \"https://rpc-quicknode-holesky.morphl2.io\",\n        blockExplorer: \"https://explorer-holesky.morphl2.io\",\n        nativeCurrency: {\n            name: \"Ether\",\n            symbol: \"ETH\",\n            decimals: 18\n        }\n    },\n    ETHEREUM: {\n        id: 1,\n        name: \"Ethereum Mainnet\",\n        rpcUrl: \"https://mainnet.infura.io/v3/\",\n        blockExplorer: \"https://etherscan.io\",\n        nativeCurrency: {\n            name: \"Ether\",\n            symbol: \"ETH\",\n            decimals: 18\n        }\n    },\n    SEPOLIA: {\n        id: 11155111,\n        name: \"Sepolia\",\n        rpcUrl: \"https://sepolia.infura.io/v3/\",\n        blockExplorer: \"https://sepolia.etherscan.io\",\n        nativeCurrency: {\n            name: \"Sepolia Ether\",\n            symbol: \"SEP\",\n            decimals: 18\n        }\n    }\n};\nconst MORPH_CHAIN_ID = \"0xafa\"; // or 2810 if you're using decimal\nconst MORPH_CHAIN_ID_DECIMAL = 2810;\nconst MORPH_NETWORK_CONFIG = SUPPORTED_CHAINS.MORPH_HOLESKY;\n// Validate Ethereum address\nconst isValidAddress = (address)=>{\n    if (!address || typeof address !== \"string\") {\n        return false;\n    }\n    // Check if it's a valid hex string with 0x prefix and 40 characters\n    return /^0x[a-fA-F0-9]{40}$/.test(address);\n};\n// Validate chain ID\nconst isValidChainId = (chainId)=>{\n    const supportedChainIds = Object.values(SUPPORTED_CHAINS).map((chain)=>chain.id);\n    return supportedChainIds.includes(parseInt(chainId));\n};\n// Get chain info by ID\nconst getChainInfo = (chainId)=>{\n    return Object.values(SUPPORTED_CHAINS).find((chain)=>chain.id === parseInt(chainId)) || null;\n};\n// Wei/ETH conversion utilities\nconst toWei = (eth, unit = \"ether\")=>{\n    if (!eth || isNaN(parseFloat(eth))) {\n        return \"0\";\n    }\n    const units = {\n        wei: \"1\",\n        kwei: \"1000\",\n        mwei: \"1000000\",\n        gwei: \"1000000000\",\n        szabo: \"1000000000000\",\n        finney: \"1000000000000000\",\n        ether: \"1000000000000000000\"\n    };\n    const multiplier = units[unit.toLowerCase()] || units.ether;\n    const ethAmount = parseFloat(eth);\n    const weiAmount = ethAmount * parseFloat(multiplier);\n    return Math.floor(weiAmount).toString();\n};\n// Convert Wei to ETH\nconst fromWei = (wei, unit = \"ether\")=>{\n    if (!wei || isNaN(parseFloat(wei))) {\n        return \"0\";\n    }\n    const units = {\n        wei: \"1\",\n        kwei: \"1000\",\n        mwei: \"1000000\",\n        gwei: \"1000000000\",\n        szabo: \"1000000000000\",\n        finney: \"1000000000000000\",\n        ether: \"1000000000000000000\"\n    };\n    const divisor = units[unit.toLowerCase()] || units.ether;\n    const weiAmount = parseFloat(wei);\n    const ethAmount = weiAmount / parseFloat(divisor);\n    return ethAmount.toString();\n};\n// Format ETH amount for display\nconst formatEther = (amount, decimals = 4)=>{\n    const numAmount = parseFloat(amount);\n    if (isNaN(numAmount)) return \"0 ETH\";\n    return `${numAmount.toFixed(decimals)} ETH`;\n};\n// Validate transaction hash\nconst isValidTxHash = (hash)=>{\n    if (!hash || typeof hash !== \"string\") {\n        return false;\n    }\n    return /^0x[a-fA-F0-9]{64}$/.test(hash);\n};\n// Amount validation for Web3\nconst validateAmount = (amount)=>{\n    if (amount === null || amount === undefined) {\n        return false;\n    }\n    const numAmount = parseFloat(amount);\n    return !isNaN(numAmount) && numAmount > 0;\n};\n// Contract interaction helpers\nconst encodeContractCall = (methodSignature, params = [])=>{\n    // Simple ABI encoding for common method calls\n    // In production, you'd use a proper ABI encoder like ethers.js\n    const methodId = methodSignature.slice(0, 10); // First 4 bytes\n    // This is a simplified version - real implementation would need proper ABI encoding\n    return methodId + params.map((p)=>p.toString().padStart(64, \"0\")).join(\"\");\n};\n// Generate contract deployment data\nconst generateDeploymentData = (bytecode, constructorParams = [])=>{\n    return bytecode + constructorParams.map((p)=>p.toString().padStart(64, \"0\")).join(\"\");\n};\n// Gas estimation helpers\nconst estimateGasPrice = (priority = \"standard\")=>{\n    // Simplified gas price estimation\n    const gasPrices = {\n        slow: \"10000000000\",\n        standard: \"20000000000\",\n        fast: \"30000000000\",\n        rapid: \"50000000000\" // 50 gwei\n    };\n    return gasPrices[priority] || gasPrices.standard;\n};\n// Validate Web3 payment data\nconst validateWeb3PaymentData = (data)=>{\n    const errors = [];\n    if (!data.amount || !validateAmount(data.amount)) {\n        errors.push(\"Amount must be a positive number\");\n    }\n    if (data.recipient && !isValidAddress(data.recipient)) {\n        errors.push(\"Recipient must be a valid Ethereum address\");\n    }\n    if (data.chainId && !isValidChainId(data.chainId)) {\n        errors.push(\"Unsupported chain ID\");\n    }\n    if (data.tokenAddress && !isValidAddress(data.tokenAddress)) {\n        errors.push(\"Token address must be a valid Ethereum address\");\n    }\n    if (data.gasLimit && (isNaN(parseInt(data.gasLimit)) || parseInt(data.gasLimit) <= 0)) {\n        errors.push(\"Gas limit must be a positive integer\");\n    }\n    return {\n        isValid: errors.length === 0,\n        errors\n    };\n};\n// Wallet connection utilities\nconst detectWallet = ()=>{\n    if (true) {\n        return null;\n    }\n    const wallets = {\n        metamask: window.ethereum?.isMetaMask,\n        coinbase: window.ethereum?.isCoinbaseWallet,\n        walletconnect: window.WalletConnect,\n        trust: window.ethereum?.isTrust\n    };\n    return Object.entries(wallets).filter(([_, isPresent])=>isPresent).map(([name])=>name);\n};\n// Check if wallet is connected\nconst isWalletConnected = async ()=>{\n    if (true) {\n        return false;\n    }\n    try {\n        const accounts = await window.ethereum.request({\n            method: \"eth_accounts\"\n        });\n        return accounts && accounts.length > 0;\n    } catch (error) {\n        console.warn(\"Error checking wallet connection:\", error);\n        return false;\n    }\n};\n// Generate unique ID\nconst generateId = (prefix = \"mp\")=>{\n    const timestamp = Date.now().toString(36);\n    const randomPart = Math.random().toString(36).substring(2, 15);\n    return `${prefix}_${timestamp}_${randomPart}`;\n};\n// Deep merge objects\nconst deepMerge = (target, ...sources)=>{\n    if (!sources.length) return target;\n    const source = sources.shift();\n    if (isObject(target) && isObject(source)) {\n        for(const key in source){\n            if (isObject(source[key])) {\n                if (!target[key]) Object.assign(target, {\n                    [key]: {}\n                });\n                deepMerge(target[key], source[key]);\n            } else {\n                Object.assign(target, {\n                    [key]: source[key]\n                });\n            }\n        }\n    }\n    return deepMerge(target, ...sources);\n};\n// Check if value is object\nconst isObject = (item)=>{\n    return item && typeof item === \"object\" && !Array.isArray(item);\n};\n// Debounce function\nconst debounce = (func, wait, immediate = false)=>{\n    let timeout;\n    return function executedFunction(...args) {\n        const later = ()=>{\n            timeout = null;\n            if (!immediate) func(...args);\n        };\n        const callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func(...args);\n    };\n};\n// Browser detection utilities\nconst getBrowserInfo = ()=>{\n    if (true) {\n        return {\n            name: \"server\",\n            version: \"unknown\"\n        };\n    }\n    const ua = window.navigator.userAgent;\n    if (ua.includes(\"Chrome\")) return {\n        name: \"Chrome\",\n        version: ua.match(/Chrome\\/(\\d+)/)?.[1]\n    };\n    if (ua.includes(\"Firefox\")) return {\n        name: \"Firefox\",\n        version: ua.match(/Firefox\\/(\\d+)/)?.[1]\n    };\n    if (ua.includes(\"Safari\")) return {\n        name: \"Safari\",\n        version: ua.match(/Safari\\/(\\d+)/)?.[1]\n    };\n    if (ua.includes(\"Edge\")) return {\n        name: \"Edge\",\n        version: ua.match(/Edge\\/(\\d+)/)?.[1]\n    };\n    return {\n        name: \"unknown\",\n        version: \"unknown\"\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./sdk/core/utils.js\n");

/***/ })

};
;