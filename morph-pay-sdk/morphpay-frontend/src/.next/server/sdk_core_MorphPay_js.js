"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "sdk_core_MorphPay_js";
exports.ids = ["sdk_core_MorphPay_js"];
exports.modules = {

/***/ "./sdk/core/MorphPay.js":
/*!******************************!*\
  !*** ./sdk/core/MorphPay.js ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var web3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3 */ \"web3\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([web3__WEBPACK_IMPORTED_MODULE_0__]);\nweb3__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// Contract configuration\nconst CONTRACT_CONFIG = {\n    PAYMENT_GATEWAY_ADDRESS: process.env.NEXT_PUBLIC_CONTRACT_ADDRESS || \"0xaF673968bd6b1c373670c9e82bc8B9059d5037F4\",\n    USDT_ADDRESS: process.env.NEXT_PUBLIC_USDT_ADDRESS || \"0x65aFADD39029741B3b8f0756952C74678c9cEC93\",\n    USDC_ADDRESS: process.env.NEXT_PUBLIC_USDC_ADDRESS || \"0x69f66FFbb39Bfe6538d870Bd483999A6C7442B58\",\n    MORPH_CHAIN_ID: \"0xafa\",\n    MORPH_CHAIN_ID_DECIMAL: 2810,\n    MORPH_RPC_URL: \"https://rpc-holesky.morphl2.io\",\n    MORPH_EXPLORER_BASE: \"https://explorer-holesky.morphl2.io/tx/\"\n};\n// Payment Gateway ABI - Full ABI from PaymentGateway.json\nconst PAYMENT_GATEWAY_ABI = [\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_feeRecipient\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"constructor\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"DailyLimitExceeded\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"EnforcedPause\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"ExpectedPause\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"FeeTooHigh\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"InvalidAddress\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"InvalidAmount\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"owner\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"OwnableInvalidOwner\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"account\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"OwnableUnauthorizedAccount\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"PaymentAlreadyProcessed\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"PaymentTooSmall\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"ReentrancyGuardReentrantCall\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"token\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"SafeERC20FailedOperation\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"TokenNotSupported\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"TransferFailed\",\n        \"type\": \"error\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"oldLimit\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"newLimit\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"DailyLimitUpdated\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"token\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"to\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"EmergencyWithdrawal\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"oldRecipient\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"newRecipient\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"FeeRecipientUpdated\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"oldFee\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"newFee\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"FeeUpdated\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"oldMin\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"newMin\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"MinPaymentUpdated\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"previousOwner\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"newOwner\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"OwnershipTransferred\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"account\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"Paused\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"bytes32\",\n                \"name\": \"paymentId\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"payer\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"vendor\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"token\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"amountNet\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"fee\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"timestamp\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"PaymentSettled\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"token\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"bool\",\n                \"name\": \"supported\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"name\": \"TokenSupported\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"account\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"Unpaused\",\n        \"type\": \"event\"\n    },\n    {\n        \"stateMutability\": \"payable\",\n        \"type\": \"fallback\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"MAX_FEE_BPS\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"MIN_PAYMENT_AMOUNT\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address[]\",\n                \"name\": \"tokens\",\n                \"type\": \"address[]\"\n            },\n            {\n                \"internalType\": \"uint256[]\",\n                \"name\": \"amounts\",\n                \"type\": \"uint256[]\"\n            },\n            {\n                \"internalType\": \"address[]\",\n                \"name\": \"vendors\",\n                \"type\": \"address[]\"\n            },\n            {\n                \"internalType\": \"bytes32[]\",\n                \"name\": \"paymentIds\",\n                \"type\": \"bytes32[]\"\n            }\n        ],\n        \"name\": \"batchPayWithTokens\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"calculateFee\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"calculateNetAmount\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"dailyPaymentLimit\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"dailyPaymentVolume\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"disableEmergencyWithdrawal\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"emergencyBalance\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"token\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"to\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"emergencyWithdraw\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"emergencyWithdrawalEnabled\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"enableEmergencyWithdrawal\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"feeBps\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"feeRecipient\",\n        \"outputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"dayTimestamp\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"getDailyVolume\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"getRemainingDailyLimit\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"getTodayVolume\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"owner\",\n        \"outputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"pause\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"paused\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"vendor\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"paymentId\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"payWithETH\",\n        \"outputs\": [],\n        \"stateMutability\": \"payable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"token\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"vendor\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"paymentId\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"payWithToken\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"processedPayments\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"renounceOwnership\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"newLimit\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"setDailyPaymentLimit\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"newFeeBps\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"setFeeBps\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"newRecipient\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"setFeeRecipient\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"token\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"supported\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"name\": \"setSupportedToken\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"supportedTokens\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"newOwner\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"transferOwnership\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"unpause\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"vendorPayments\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"stateMutability\": \"payable\",\n        \"type\": \"receive\"\n    }\n];\n// ERC20 Token ABI\nconst ERC20_ABI = [\n    {\n        \"type\": \"function\",\n        \"name\": \"balanceOf\",\n        \"inputs\": [\n            {\n                \"name\": \"owner\",\n                \"type\": \"address\"\n            }\n        ],\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\"\n    },\n    {\n        \"type\": \"function\",\n        \"name\": \"decimals\",\n        \"inputs\": [],\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"uint8\"\n            }\n        ],\n        \"stateMutability\": \"view\"\n    },\n    {\n        \"type\": \"function\",\n        \"name\": \"symbol\",\n        \"inputs\": [],\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"string\"\n            }\n        ],\n        \"stateMutability\": \"view\"\n    },\n    {\n        \"type\": \"function\",\n        \"name\": \"name\",\n        \"inputs\": [],\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"string\"\n            }\n        ],\n        \"stateMutability\": \"view\"\n    },\n    {\n        \"type\": \"function\",\n        \"name\": \"approve\",\n        \"inputs\": [\n            {\n                \"name\": \"spender\",\n                \"type\": \"address\"\n            },\n            {\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\"\n    },\n    {\n        \"type\": \"function\",\n        \"name\": \"allowance\",\n        \"inputs\": [\n            {\n                \"name\": \"owner\",\n                \"type\": \"address\"\n            },\n            {\n                \"name\": \"spender\",\n                \"type\": \"address\"\n            }\n        ],\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\"\n    },\n    {\n        \"type\": \"function\",\n        \"name\": \"transfer\",\n        \"inputs\": [\n            {\n                \"name\": \"to\",\n                \"type\": \"address\"\n            },\n            {\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\"\n    },\n    {\n        \"type\": \"function\",\n        \"name\": \"mintTo\",\n        \"inputs\": [\n            {\n                \"name\": \"to\",\n                \"type\": \"address\"\n            }\n        ],\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\"\n    },\n    {\n        \"type\": \"function\",\n        \"name\": \"lastMinted\",\n        \"inputs\": [\n            {\n                \"name\": \"user\",\n                \"type\": \"address\"\n            }\n        ],\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\"\n    }\n];\nclass MorphPay {\n    constructor(options = {}){\n        this.contractAddress = options.contractAddress || CONTRACT_CONFIG.PAYMENT_GATEWAY_ADDRESS;\n        this.rpcUrl = options.rpcUrl || CONTRACT_CONFIG.MORPH_RPC_URL;\n        this.chainId = options.chainId || CONTRACT_CONFIG.MORPH_CHAIN_ID;\n        this.chainIdDecimal = options.chainIdDecimal || CONTRACT_CONFIG.MORPH_CHAIN_ID_DECIMAL;\n        this.explorerBase = options.explorerBase || CONTRACT_CONFIG.MORPH_EXPLORER_BASE;\n        this.web3 = null;\n        this.contract = null;\n        this.account = \"\";\n        this.isConnected = false;\n        this.contractInfo = {\n            exists: null,\n            paused: false,\n            feeBps: \"50\",\n            feeRecipient: \"\",\n            dailyLimit: \"0\",\n            todayVolume: \"0\",\n            minPayment: \"0\",\n            maxFeeBps: \"1000\",\n            remainingDailyLimit: \"0\"\n        };\n        if (!this.contractAddress) {\n            throw new Error(\"PaymentGateway contract address is required\");\n        }\n    }\n    // Initialize Web3 and connect wallet\n    async initializeWeb3() {\n        if (false) {}\n        throw new Error(\"MetaMask not found\");\n    }\n    // Check if MetaMask is installed\n    isMetaMaskInstalled() {\n        return  false && 0;\n    }\n    // Validate Ethereum address\n    isValidAddress(address) {\n        return /^0x[a-fA-F0-9]{40}$/.test(address);\n    }\n    // Handle account changes\n    handleAccountsChanged(accounts) {\n        if (accounts.length === 0) {\n            this.isConnected = false;\n            this.account = \"\";\n        } else {\n            this.account = accounts[0];\n            if (this.web3) {\n                this.getBalance(accounts[0]);\n            }\n        }\n    }\n    // Handle chain changes\n    handleChainChanged(newChainId) {\n        if (newChainId === this.chainId) {\n            if (this.web3 && this.contract) {\n                this.checkContract();\n            }\n        }\n    }\n    // Connect wallet\n    async connectWallet() {\n        if (!this.isMetaMaskInstalled()) {\n            throw new Error(\"MetaMask is not installed. Please install MetaMask to continue.\");\n        }\n        if (!this.web3) await this.initializeWeb3();\n        try {\n            const accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\"\n            });\n            this.account = accounts[0];\n            this.isConnected = true;\n            const currentChainId = await window.ethereum.request({\n                method: \"eth_chainId\"\n            });\n            if (currentChainId !== this.chainId) {\n                await this.switchToMorphNetwork();\n            }\n            await this.getBalance(this.account);\n            await this.checkContract();\n            return {\n                account: this.account,\n                chainId: currentChainId\n            };\n        } catch (error) {\n            throw new Error(`Failed to connect wallet: ${error.message}`);\n        }\n    }\n    // Switch to Morph network\n    async switchToMorphNetwork() {\n        try {\n            await window.ethereum.request({\n                method: \"wallet_switchEthereumChain\",\n                params: [\n                    {\n                        chainId: this.chainId\n                    }\n                ]\n            });\n        } catch (switchError) {\n            if (switchError.code === 4902) {\n                try {\n                    await window.ethereum.request({\n                        method: \"wallet_addEthereumChain\",\n                        params: [\n                            {\n                                chainId: this.chainId,\n                                chainName: \"Morph Holesky Testnet\",\n                                nativeCurrency: {\n                                    name: \"ETH\",\n                                    symbol: \"ETH\",\n                                    decimals: 18\n                                },\n                                rpcUrls: [\n                                    this.rpcUrl\n                                ],\n                                blockExplorerUrls: [\n                                    \"https://explorer-holesky.morphl2.io/\"\n                                ]\n                            }\n                        ]\n                    });\n                } catch (addError) {\n                    throw new Error(\"Failed to add Morph Holesky Testnet to MetaMask\");\n                }\n            } else {\n                throw new Error(\"Failed to switch to Morph Holesky Testnet\");\n            }\n        }\n    }\n    // Get ETH balance\n    async getBalance(address = this.account) {\n        if (!this.web3 || !address || !this.isValidAddress(address)) return \"0\";\n        try {\n            const balance = await this.web3.eth.getBalance(address);\n            const ethBalance = this.web3.utils.fromWei(balance, \"ether\");\n            return parseFloat(ethBalance).toFixed(4);\n        } catch (error) {\n            console.error(\"Failed to get balance:\", error);\n            return \"0\";\n        }\n    }\n    // Get token balance\n    async getTokenBalance(tokenAddress, userAddress = this.account) {\n        if (!this.web3 || !tokenAddress || !userAddress) return {\n            balance: \"0\",\n            decimals: 18,\n            symbol: \"TOKEN\"\n        };\n        try {\n            const tokenContract = new this.web3.eth.Contract(ERC20_ABI, tokenAddress);\n            const [balance, decimals, symbol] = await Promise.all([\n                tokenContract.methods.balanceOf(userAddress).call(),\n                tokenContract.methods.decimals().call(),\n                tokenContract.methods.symbol().call()\n            ]);\n            const formattedBalance = this.web3.utils.fromWei(balance.toString(), decimals === 6 ? \"mwei\" : \"ether\");\n            return {\n                balance: formattedBalance,\n                decimals: parseInt(decimals),\n                symbol,\n                raw: balance.toString()\n            };\n        } catch (error) {\n            console.error(\"Failed to get token balance:\", error);\n            return {\n                balance: \"0\",\n                decimals: 18,\n                symbol: \"TOKEN\"\n            };\n        }\n    }\n    // Check contract status\n    async checkContract() {\n        try {\n            if (!this.isValidAddress(this.contractAddress)) {\n                this.contractInfo.exists = false;\n                return this.contractInfo;\n            }\n            const currentChainId = await window.ethereum.request({\n                method: \"eth_chainId\"\n            });\n            if (currentChainId !== this.chainId) {\n                this.contractInfo.exists = null;\n                return this.contractInfo;\n            }\n            const code = await this.web3.eth.getCode(this.contractAddress);\n            const exists = code && code !== \"0x\" && code !== \"0x0\";\n            if (exists && this.contract) {\n                try {\n                    const [paused, feeBps, feeRecipient, dailyLimit, todayVolume, minPayment, maxFeeBps, remainingDailyLimit] = await Promise.all([\n                        this.contract.methods.paused().call(),\n                        this.contract.methods.feeBps().call(),\n                        this.contract.methods.feeRecipient().call(),\n                        this.contract.methods.dailyPaymentLimit().call(),\n                        this.contract.methods.getTodayVolume().call(),\n                        this.contract.methods.MIN_PAYMENT_AMOUNT().call(),\n                        this.contract.methods.MAX_FEE_BPS().call(),\n                        this.contract.methods.getRemainingDailyLimit().call()\n                    ]);\n                    this.contractInfo = {\n                        exists: true,\n                        paused,\n                        feeBps: feeBps.toString(),\n                        feeRecipient,\n                        dailyLimit: this.web3.utils.fromWei(dailyLimit, \"ether\"),\n                        todayVolume: this.web3.utils.fromWei(todayVolume, \"ether\"),\n                        minPayment: this.web3.utils.fromWei(minPayment, \"ether\"),\n                        maxFeeBps: maxFeeBps.toString(),\n                        remainingDailyLimit: this.web3.utils.fromWei(remainingDailyLimit, \"ether\")\n                    };\n                } catch (error) {\n                    console.error(\"Error getting contract info:\", error);\n                    this.contractInfo.exists = true;\n                }\n            } else {\n                this.contractInfo.exists = false;\n            }\n            return this.contractInfo;\n        } catch (error) {\n            console.error(\"Error checking contract:\", error);\n            this.contractInfo.exists = false;\n            return this.contractInfo;\n        }\n    }\n    // Calculate fees\n    async calculateFee(amount) {\n        if (!this.contract || !amount || isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {\n            return {\n                fee: \"0\",\n                net: \"0\"\n            };\n        }\n        try {\n            const amountWei = this.web3.utils.toWei(amount.toString(), \"ether\");\n            const [fee, net] = await Promise.all([\n                this.contract.methods.calculateFee(amountWei).call(),\n                this.contract.methods.calculateNetAmount(amountWei).call()\n            ]);\n            return {\n                fee: this.web3.utils.fromWei(fee.toString(), \"ether\"),\n                net: this.web3.utils.fromWei(net.toString(), \"ether\")\n            };\n        } catch (error) {\n            // Fallback calculation\n            const amountNum = parseFloat(amount);\n            const feePercent = parseFloat(this.contractInfo.feeBps) / 10000;\n            const feeAmount = amountNum * feePercent;\n            const netAmount = amountNum - feeAmount;\n            return {\n                fee: feeAmount.toFixed(6),\n                net: netAmount.toFixed(6)\n            };\n        }\n    }\n    // Pay with ETH\n    // Pay with ETH - FIXED VERSION\n    async payWithETH(vendor, amount) {\n        if (!this.isConnected) throw new Error(\"Wallet not connected\");\n        if (!this.isValidAddress(vendor)) throw new Error(\"Invalid vendor address\");\n        if (!this.contractInfo.exists) throw new Error(\"Payment gateway contract not found\");\n        if (this.contractInfo.paused) throw new Error(\"Payment gateway is currently paused\");\n        const amountNum = parseFloat(amount);\n        if (isNaN(amountNum) || amountNum <= 0) throw new Error(\"Invalid amount\");\n        const minPayment = parseFloat(this.contractInfo.minPayment);\n        if (amountNum < minPayment) throw new Error(`Minimum payment amount is ${minPayment} ETH`);\n        try {\n            // Generate a unique paymentId (this is what was missing!)\n            const paymentId = this.web3.utils.randomHex(32);\n            const amountWei = this.web3.utils.toWei(amount.toString(), \"ether\");\n            // Estimate gas for the transaction\n            const gasEstimate = await this.contract.methods.payWithETH(vendor, paymentId).estimateGas({\n                from: this.account,\n                value: amountWei\n            });\n            // Execute the transaction with correct parameters: vendor and paymentId\n            // The amount goes in the 'value' field, not as a parameter\n            const tx = await this.contract.methods.payWithETH(vendor, paymentId).send({\n                from: this.account,\n                value: amountWei,\n                gas: Math.floor(Number(gasEstimate) * 1.2)\n            });\n            return {\n                transactionHash: tx.transactionHash,\n                paymentId,\n                explorerUrl: `${this.explorerBase}${tx.transactionHash}`\n            };\n        } catch (error) {\n            if (error.message.includes(\"insufficient funds\")) {\n                throw new Error(\"Insufficient ETH balance for this transaction\");\n            } else if (error.message.includes(\"User denied\") || error.message.includes(\"rejected\")) {\n                throw new Error(\"Transaction was rejected by user\");\n            } else if (error.message.includes(\"DailyLimitExceeded\")) {\n                throw new Error(\"Daily payment limit exceeded\");\n            } else if (error.message.includes(\"PaymentTooSmall\")) {\n                throw new Error(`Payment amount is below minimum of ${this.contractInfo.minPayment} ETH`);\n            } else if (error.message.includes(\"EnforcedPause\")) {\n                throw new Error(\"Payment gateway is currently paused\");\n            } else if (error.message.includes(\"PaymentAlreadyProcessed\")) {\n                throw new Error(\"This payment has already been processed\");\n            } else {\n                throw new Error(`Payment failed: ${error.message}`);\n            }\n        }\n    }\n    // Pay with Token\n    async payWithToken(tokenAddress, amount, vendor) {\n        if (!this.isConnected) throw new Error(\"Wallet not connected\");\n        if (!this.isValidAddress(vendor)) throw new Error(\"Invalid vendor address\");\n        if (!this.isValidAddress(tokenAddress)) throw new Error(\"Invalid token address\");\n        try {\n            // Check if token is supported\n            const isSupported = await this.contract.methods.supportedTokens(tokenAddress).call();\n            if (!isSupported) {\n                throw new Error(\"Token is not supported by the payment gateway\");\n            }\n            // Get token info\n            const tokenContract = new this.web3.eth.Contract(ERC20_ABI, tokenAddress);\n            const decimals = await tokenContract.methods.decimals().call();\n            // Convert amount based on token decimals\n            const amountWei = decimals === 6 ? this.web3.utils.toWei(amount.toString(), \"mwei\") // For USDT (6 decimals)\n             : this.web3.utils.toWei(amount.toString(), \"ether\") // For USDC and others (18 decimals)\n            ;\n            // Check allowance\n            const allowance = await tokenContract.methods.allowance(this.account, this.contractAddress).call();\n            if (this.web3.utils.toBN(allowance).lt(this.web3.utils.toBN(amountWei))) {\n                // Approve token spending\n                const approveTx = await tokenContract.methods.approve(this.contractAddress, amountWei).send({\n                    from: this.account\n                });\n                console.log(\"Token approval transaction:\", approveTx.transactionHash);\n            }\n            // Process payment\n            const paymentId = this.web3.utils.randomHex(32);\n            const tx = await this.contract.methods.payWithToken(tokenAddress, amountWei, vendor, paymentId).send({\n                from: this.account\n            });\n            return {\n                transactionHash: tx.transactionHash,\n                paymentId,\n                explorerUrl: `${this.explorerBase}${tx.transactionHash}`\n            };\n        } catch (error) {\n            if (error.message.includes(\"User denied\") || error.message.includes(\"rejected\")) {\n                throw new Error(\"Transaction was rejected by user\");\n            } else if (error.message.includes(\"TokenNotSupported\")) {\n                throw new Error(\"Token is not supported by the payment gateway\");\n            } else if (error.message.includes(\"DailyLimitExceeded\")) {\n                throw new Error(\"Daily payment limit exceeded\");\n            } else if (error.message.includes(\"EnforcedPause\")) {\n                throw new Error(\"Payment gateway is currently paused\");\n            } else {\n                throw new Error(`Token payment failed: ${error.message}`);\n            }\n        }\n    }\n    // Batch payment with tokens\n    async batchPayWithTokens(payments) {\n        if (!this.isConnected) throw new Error(\"Wallet not connected\");\n        if (!Array.isArray(payments) || payments.length === 0) throw new Error(\"Invalid payments array\");\n        try {\n            const tokens = [];\n            const amounts = [];\n            const vendors = [];\n            const paymentIds = [];\n            for (const payment of payments){\n                if (!this.isValidAddress(payment.vendor)) throw new Error(`Invalid vendor address: ${payment.vendor}`);\n                if (!this.isValidAddress(payment.token)) throw new Error(`Invalid token address: ${payment.token}`);\n                const tokenContract = new this.web3.eth.Contract(ERC20_ABI, payment.token);\n                const decimals = await tokenContract.methods.decimals().call();\n                const amountWei = decimals === 6 ? this.web3.utils.toWei(payment.amount.toString(), \"mwei\") : this.web3.utils.toWei(payment.amount.toString(), \"ether\");\n                tokens.push(payment.token);\n                amounts.push(amountWei);\n                vendors.push(payment.vendor);\n                paymentIds.push(this.web3.utils.randomHex(32));\n            }\n            const tx = await this.contract.methods.batchPayWithTokens(tokens, amounts, vendors, paymentIds).send({\n                from: this.account\n            });\n            return {\n                transactionHash: tx.transactionHash,\n                paymentIds,\n                explorerUrl: `${this.explorerBase}${tx.transactionHash}`\n            };\n        } catch (error) {\n            throw new Error(`Batch payment failed: ${error.message}`);\n        }\n    }\n    // Mint test tokens\n    async mintToken(tokenAddress) {\n        if (!this.isConnected) throw new Error(\"Wallet not connected\");\n        if (!this.isValidAddress(tokenAddress)) throw new Error(\"Invalid token address\");\n        try {\n            const tokenContract = new this.web3.eth.Contract(ERC20_ABI, tokenAddress);\n            // Check if user can mint (24h cooldown)\n            const lastMinted = await tokenContract.methods.lastMinted(this.account).call();\n            const canMint = Date.now() / 1000 - lastMinted > 86400;\n            if (!canMint) {\n                const timeLeft = 86400 - (Date.now() / 1000 - lastMinted);\n                const hoursLeft = Math.ceil(timeLeft / 3600);\n                throw new Error(`You can mint again in ${hoursLeft} hours`);\n            }\n            const tx = await tokenContract.methods.mintTo(this.account).send({\n                from: this.account\n            });\n            return {\n                transactionHash: tx.transactionHash,\n                explorerUrl: `${this.explorerBase}${tx.transactionHash}`\n            };\n        } catch (error) {\n            throw new Error(`Token minting failed: ${error.message}`);\n        }\n    }\n    // Generate QR code for mobile payments\n    generateQRCode(vendor, amount) {\n        if (!this.isValidAddress(vendor)) throw new Error(\"Invalid vendor address\");\n        if (!amount || parseFloat(amount) <= 0) throw new Error(\"Invalid amount\");\n        const amountWei = this.web3 ? this.web3.utils.toWei(amount.toString(), \"ether\") : (parseFloat(amount) * 1e18).toString();\n        const uri = `ethereum:${vendor}@${this.chainIdDecimal}?value=${amountWei}`;\n        return {\n            uri,\n            qrUrl: `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(uri)}`,\n            fallbackUrl: `https://chart.googleapis.com/chart?chs=200x200&cht=qr&chl=${encodeURIComponent(uri)}`\n        };\n    }\n    // Check if token is supported\n    async isTokenSupported(tokenAddress) {\n        if (!this.contract || !this.isValidAddress(tokenAddress)) return false;\n        try {\n            return await this.contract.methods.supportedTokens(tokenAddress).call();\n        } catch (error) {\n            console.error(\"Error checking token support:\", error);\n            return false;\n        }\n    }\n    // Get daily volume for a specific date\n    async getDailyVolume(dayTimestamp) {\n        if (!this.contract) return \"0\";\n        try {\n            const volume = await this.contract.methods.getDailyVolume(dayTimestamp).call();\n            return this.web3.utils.fromWei(volume, \"ether\");\n        } catch (error) {\n            console.error(\"Error getting daily volume:\", error);\n            return \"0\";\n        }\n    }\n    // Get vendor payments total\n    async getVendorPayments(vendorAddress) {\n        if (!this.contract || !this.isValidAddress(vendorAddress)) return \"0\";\n        try {\n            const payments = await this.contract.methods.vendorPayments(vendorAddress).call();\n            return this.web3.utils.fromWei(payments, \"ether\");\n        } catch (error) {\n            console.error(\"Error getting vendor payments:\", error);\n            return \"0\";\n        }\n    }\n    // Check if payment ID has been processed\n    async isPaymentProcessed(paymentId) {\n        if (!this.contract || !paymentId) return false;\n        try {\n            return await this.contract.methods.processedPayments(paymentId).call();\n        } catch (error) {\n            console.error(\"Error checking payment status:\", error);\n            return false;\n        }\n    }\n    // Get contract owner\n    async getOwner() {\n        if (!this.contract) return null;\n        try {\n            return await this.contract.methods.owner().call();\n        } catch (error) {\n            console.error(\"Error getting contract owner:\", error);\n            return null;\n        }\n    }\n    // Get emergency withdrawal status\n    async getEmergencyWithdrawalStatus() {\n        if (!this.contract) return false;\n        try {\n            return await this.contract.methods.emergencyWithdrawalEnabled().call();\n        } catch (error) {\n            console.error(\"Error getting emergency withdrawal status:\", error);\n            return false;\n        }\n    }\n    // Get emergency balance for a token\n    async getEmergencyBalance(tokenAddress) {\n        if (!this.contract || !this.isValidAddress(tokenAddress)) return \"0\";\n        try {\n            const balance = await this.contract.methods.emergencyBalance(tokenAddress).call();\n            return this.web3.utils.fromWei(balance, \"ether\");\n        } catch (error) {\n            console.error(\"Error getting emergency balance:\", error);\n            return \"0\";\n        }\n    }\n    // Get contract addresses\n    getContractAddresses() {\n        return {\n            paymentGateway: this.contractAddress,\n            usdt: CONTRACT_CONFIG.USDT_ADDRESS,\n            usdc: CONTRACT_CONFIG.USDC_ADDRESS\n        };\n    }\n    // Get network info\n    getNetworkInfo() {\n        return {\n            chainId: this.chainId,\n            chainIdDecimal: this.chainIdDecimal,\n            rpcUrl: this.rpcUrl,\n            explorerBase: this.explorerBase,\n            name: \"Morph Holesky Testnet\"\n        };\n    }\n    // Listen to contract events\n    subscribeToEvents(eventName, callback, fromBlock = \"latest\") {\n        if (!this.contract) {\n            throw new Error(\"Contract not initialized\");\n        }\n        const eventEmitter = this.contract.events[eventName]({\n            fromBlock: fromBlock\n        });\n        eventEmitter.on(\"data\", callback);\n        eventEmitter.on(\"error\", (error)=>{\n            console.error(`Error in ${eventName} event:`, error);\n        });\n        return eventEmitter;\n    }\n    // Cleanup event listeners\n    cleanup() {\n        if (false) {}\n    }\n}\n// Browser-specific additions - Payment Form Helper\nMorphPay.prototype.createPaymentForm = function(containerId, options = {}) {\n    const container = document.getElementById(containerId);\n    if (!container) {\n        throw new Error(`Container with id \"${containerId}\" not found`);\n    }\n    const form = document.createElement(\"form\");\n    form.innerHTML = `\r\n    <div class=\"morphpay-form\" style=\"max-width: 400px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px;\">\r\n      <h3>MorphPay Payment</h3>\r\n      \r\n      <div class=\"form-group\" style=\"margin-bottom: 15px;\">\r\n        <label style=\"display: block; margin-bottom: 5px;\">Payment Type:</label>\r\n        <select name=\"paymentType\" style=\"width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;\">\r\n          <option value=\"ETH\">ETH</option>\r\n          <option value=\"USDT\">USDT</option>\r\n          <option value=\"USDC\">USDC</option>\r\n        </select>\r\n      </div>\r\n      \r\n      <div class=\"form-group\" style=\"margin-bottom: 15px;\">\r\n        <label style=\"display: block; margin-bottom: 5px;\">Amount:</label>\r\n        <input type=\"number\" name=\"amount\" step=\"0.001\" min=\"0.001\" placeholder=\"0.01\" required \r\n               style=\"width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;\" />\r\n      </div>\r\n      \r\n      <div class=\"form-group\" style=\"margin-bottom: 15px;\">\r\n        <label style=\"display: block; margin-bottom: 5px;\">Vendor Address:</label>\r\n        <input type=\"text\" name=\"vendor\" placeholder=\"0x...\" required \r\n               style=\"width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; font-family: monospace;\" />\r\n      </div>\r\n      \r\n      <div class=\"form-group\" style=\"margin-bottom: 15px;\">\r\n        <div id=\"connection-status\" style=\"padding: 10px; background: #f0f0f0; border-radius: 4px; text-align: center;\">\r\n          <span>Not connected</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <button type=\"button\" id=\"connect-wallet\" \r\n              style=\"width: 100%; padding: 10px; background: #007cba; color: white; border: none; border-radius: 4px; margin-bottom: 10px; cursor: pointer;\">\r\n        Connect Wallet\r\n      </button>\r\n      \r\n      <button type=\"submit\" disabled\r\n              style=\"width: 100%; padding: 10px; background: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer; opacity: 0.5;\">\r\n        Pay Now\r\n      </button>\r\n      \r\n      <div id=\"status-messages\" style=\"margin-top: 15px;\"></div>\r\n    </div>\r\n  `;\n    const connectBtn = form.querySelector(\"#connect-wallet\");\n    const submitBtn = form.querySelector('button[type=\"submit\"]');\n    const statusDiv = form.querySelector(\"#connection-status span\");\n    const messagesDiv = form.querySelector(\"#status-messages\");\n    const showMessage = (message, type = \"info\")=>{\n        const colors = {\n            success: \"#d4edda\",\n            error: \"#f8d7da\",\n            info: \"#d1ecf1\"\n        };\n        messagesDiv.innerHTML = `<div style=\"padding: 10px; background: ${colors[type]}; border-radius: 4px; margin-top: 10px;\">${message}</div>`;\n    };\n    connectBtn.addEventListener(\"click\", async ()=>{\n        try {\n            connectBtn.disabled = true;\n            connectBtn.textContent = \"Connecting...\";\n            const result = await this.connectWallet();\n            submitBtn.disabled = false;\n            submitBtn.style.opacity = \"1\";\n            connectBtn.textContent = `Connected: ${result.account.slice(0, 6)}...${result.account.slice(-4)}`;\n            statusDiv.textContent = `Connected to ${result.account.slice(0, 6)}...${result.account.slice(-4)}`;\n            statusDiv.parentElement.style.background = \"#d4edda\";\n            showMessage(\"Wallet connected successfully!\", \"success\");\n        } catch (error) {\n            connectBtn.disabled = false;\n            connectBtn.textContent = \"Connect Wallet\";\n            showMessage(`Connection failed: ${error.message}`, \"error\");\n            if (options.onError) options.onError(error);\n        }\n    });\n    form.addEventListener(\"submit\", async (e)=>{\n        e.preventDefault();\n        const formData = new FormData(form);\n        const paymentType = formData.get(\"paymentType\");\n        const amount = formData.get(\"amount\");\n        const vendor = formData.get(\"vendor\");\n        try {\n            submitBtn.disabled = true;\n            submitBtn.textContent = \"Processing...\";\n            showMessage(\"Processing payment...\", \"info\");\n            let result;\n            if (paymentType === \"ETH\") {\n                result = await this.payWithETH(vendor, amount);\n            } else if (paymentType === \"USDT\") {\n                result = await this.payWithToken(CONTRACT_CONFIG.USDT_ADDRESS, amount, vendor);\n            } else if (paymentType === \"USDC\") {\n                result = await this.payWithToken(CONTRACT_CONFIG.USDC_ADDRESS, amount, vendor);\n            }\n            showMessage(`Payment successful! <a href=\"${result.explorerUrl}\" target=\"_blank\">View Transaction</a>`, \"success\");\n            if (options.onSuccess) options.onSuccess(result);\n        } catch (error) {\n            showMessage(`Payment failed: ${error.message}`, \"error\");\n            if (options.onError) options.onError(error);\n        } finally{\n            submitBtn.disabled = false;\n            submitBtn.textContent = \"Pay Now\";\n        }\n    });\n    container.appendChild(form);\n    return form;\n};\n// Export for different environments\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MorphPay);\n// Only add to window in browser environments, after export\nif (false) {}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./sdk/core/MorphPay.js\n");

/***/ })

};
;